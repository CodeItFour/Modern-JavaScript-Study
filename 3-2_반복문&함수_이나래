
## 📚 학습 주제
- **주차**: [주차번호] 3-1주차(2)
- **주제**: [학습 주제명] 반복문&함수

## 📝 학습 내용 체크리스트

### ✅ 개념 요약
1.'if'와 '?'를 사용한 조건 처리
1-1.if문 
- 형태: if (조건) { 실행문 } else { 실행문 }
- true > if 실행 / false > else 실행
- 여러 조건 → else if 사용
- falsy: 0, "", null, undefined, NaN / 나머진 truthy

1-2.조건부 연산자 (삼항 연산자 ? :)
- 형태: let result = 조건 ? 값1 : 값2;

1-3.if문/조건부 연산자 특징 비교
- if문 = 여러 분기, 실행 제어
- ? : = 간단히 값 선택

2.논리 연산자
2-1.OR (||)
- 하나라도 true > true, 모두 false > false
- 왼쪽이 truthy면 오른쪽은 실행 안 함

2-2.AND (&&)
- 둘 다 true > true, 아니면 false
- 왼쪽이 falsy면 오른쪽은 실행 안 함

2-3.NOT (!)
- true <-> false 반전
- 우선순위 가장 높음

2-4. 핵심 비교
- || > 첫 truthy 값 반환
- && > 첫 falsy 값 반환
- !는 값을 불린으로 변환 후 > 반전

3.nullish 병합 연산자 '??'
- a ?? b > a가 null이나 undefined가 아니면 a이고 그렇지 않으면 b이다.

---

### 🔍 모르는 개념 연구
1.?를 if 대용으로 사용하지 않는 이유
- ?는 원래 값을 선택/할당할 때 쓰는 용도 > 실행문을 추가하면 가로로 길어져 가독성이 떨어짐
- 한눈에 보기 어렵고, 나중에 유지보수할 때 헷갈림
- 역할이 뒤섞여서 코드 의미가 모호함

2.truthy/falsy
- falsy: 0, "", null, undefined, NaN, false이고 나머지는 전부 truthy.
- 반환값은 불린이 아닐 수 있음 `console.log( 1 || "hi" );` \ truthy 그대로 반환

3.??와 ||의 설명과 차이점
- ||은 0이나 빈값 문자열도 없다로 취급하고 ??는 null/undefined만 없다로 취급 > 값 초기화 때 안전
- ??는 “값이 없으면(null/undefined) 기본값 사용하지만 ||와 다르게 0이나 ""는 값으로 인정함

---

## 📋 주요 학습 개념 설명/요약 (선택)
- if > 여러 분기, 실행 흐름 제어
- ?: > 간단한 값 선택
- || / ?? > 기본값 할당
- && > 조건 실행
- if문/조건부연산자 핵심 차이 > 용도차이, 가독성, 반환값
 
---

## ❓ 질문사항 및 토론 포인트
1. 연산자 우선순위 
- ! > && > || 순서로 실행된다고 하는데 그 이유에 대해 궁금합니다.
- 조건문 선택 기준을 좀 더 이해

---

## 📖 참고 자료 (선택)

