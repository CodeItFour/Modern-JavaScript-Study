##요약 및 상세 개념정리

#Hello World (<script> 태그 기본)

1. **script 태그**
    - <script> ... </script> 안에 JS 쓰면 바로 실행
2. **모던 마크업 (과거에 사용, 지금은 안쓰는 것들)**
    - type="text/javascript" 
    - language="javascript" 
    - 옛날 주석 → 브라우저 숨기기용 
3. **외부 스크립트**
    - 스크립트가 길면 파일로 분리
    - 불러오기: <script src="파일.js"></script>, 상대경로나 전체주소 가능
    - 여러 개: <script src="a.js"></script>, <script src="b.js"></script>
    - 이유: 캐시 덕분에 빠르고 트래픽 절약
    - 주의: src 쓰면 안에 쓴 코드는 무시됨, 내부코드와 외부 파일은 따로 써야 함

---

#코드 구조(statement)

1. **코드문**
    - 동작 명령을 지시하는 코드 단위
    - 규칙: 세미클론으로 구분, 가독성 위한 줄바꿈
2. **(세미콜론(semicolon)**
    - 문 끝을 (;)로 구분하며, 줄바꿈 시 생략 가능하지만 넣는 게 안전함
3. **주석** 
    - 복잡한 JS 프로그램으로 필요해진 상황 
    - 주석 안에 주석을 넣으면 에러발생
    - 주석은 사람을 위한 설명이고 컴퓨터는 주석을 무시함

---

#엄격 모드 (JS 실행을 더 안전하게 'use strict')

1. **use strict 지시자**
    - 이 한 줄로 스크립트 전체가 엄격 모드 적용
    - 함수 내부에 쓰이면 함수 안에서 엄격 모드 적용
    - 특징: 반드시 코드 맨 위에 배치, 주석은 위에 있어도 됨, 한번 켜면 끌 수 없음
2. **브라우저 콘솔**
    - 브라우저 콘솔은 엄격 모드가 아님
    - 콘솔에서 엄격 모드 쓰는 법: ‘use strict’ 먼저 입력 > 코드 작성 > 실행!
    - 오래된 브라우저에 적용하는 법: function() 코드 안에 추가하면 됨
    - ES6 클래스/모듈은 자동 엄격 모드
3. **use strict 사용해야 하나?**
    - 초보자, 일반적 상황에 사용 권장
    - 클래스, 모듈을 쓰면 자동으로 엄격 모드 적용

---

#변수 (let, const)

1. **변수 종류**
    - let: 변수 선언 (기본)
    - const: 변경 불가능한 값 (상수)
    - var: 과거 방식이며, 현재는 let 사용 권장
2. **변수란?**
    - 데이터를 저장하는 ‘이름이 붙은 상자’
    *변수 이름 규칙*
        - 문자, 숫자, 언더바, $만 허용
        - 숫자로 시작 X, 영어 사용 권장
        - 대·소문자 구분
        - 예약어 사용 금지 (let, return, class)
    *변수 사용 주의*
        - 같은 이름으로 중복 선언 X
        - 값은 자유롭게 변경 가능
        - 변수끼리 값 복사 가능
    *함수형 언어 특징*
        - 변수 값 변경 불가하며, 수정하려면 새 변수 선언!
3. **상수 const란?**
    *대문자 상수(ALL_CAPS)*
        - 하드코딩된 값의 별명
        - 색상코드, API URL
        - 고정된 숫자에 사용됨
        - 대문자+언더바 (const API_URL = "https://...")
    *일반 상수*
        - 실행 도중 계산되는 값
    *좋은 변수 이름 규칙*
        - 사람이 읽기 쉬운 이름
        - 줄임말 X
        - data, value 처럼 모호한 이름 X
        - 팀 규칙에 따라 일관성 유지
        - camelCase 사용 (const maxUsers = 100)
    *변수 재사용 금지*
        - 의미가 바뀌면 새 변수 선언해야 함
        - 브라우저가 최적화 → 성능 걱정 X

---

#자료형
    *숫자*
        - 숫자의 연산은 곱셈, 나눗셈, 덧셈, 뺄셈 등이 있음
        - 정수, 소수, Infinity, -Infinity, NaN 포함
    *bigint*
        - 아주 큰 정수를 나타낼 수 있음 (숫자 끝에 `n` 붙임)
    *string*
        - 문자열. "큰따옴표", '작은따옴표', 백틱 모두 사용 가능
        - 백틱은 ${}로 변수나 계산식 넣을 수 있음
    *불린형*
        - true, false (참/거짓)
    *‘null’값*
        - ‘아무것도 없다'는 의미. 직접 값으로 설정함
        - 의도적으로 값이 없음
    *undefined*
        - "값이 아직 없다'는 의미. 변수 선언만 하고 값 안 주면 자동으로 할당됨
        - 직접 할당하는 걸 권장하지 않음
    *객체(object)*
        - {name: "Tom"}, []
        - 여러 데이터를 묶어 표현하는 자료형 (복잡한 구조)
    *심볼(symbol)*
        - Symbol("id")
        - 객체의 고유 식별자 생성용 (잘 쓰이진 않음)
    *자바스크립트는 동적 타입 언어*
        - 변수에 어떤 값이든 저장할 수 있고, 언제든 자료형이 바뀔 수 있음
    *typeof 연산자*
        - 인수의 자료형 반환

---

##팀원들과 공유하면 좋을 포인트
1. type="text/javascript" 같은 속성은 지금은 생략할수 있고 코드 더 간결하게 작성할 수 있음.
외부 JS 파일을 쓸 땐 <script src="파일명.js"> 만 쓰면 되고, 태그 안에 코드를 같이 쓰면 무시되니 주의필요!

2. 자바스크립트는 문(statement) 단위로 동작함. 줄바꿈하면 세미콜론 생략 가능하지만, 초보자일수록 무조건 붙이는 게 안전!

3. use strict는 오타나 선언누락을 에러로 잡아주는 안전장치라고 함.
실무/팀 협업할 땐 꼭 상단에 선언해서 쓰는 습관을 들이는 것이 중요한것 같음.

4. let, const만 사용하기 (var는 NO) 
변경이 필요한 건 let, 변경되면 안 되는 건 const로 구분해서 사용

5. 변수명은 미래의 나와 팀원을 위해 의미 있는 이름 사용하고, 애매한 이름은 지양해야 함. 
팀 코드 스타일에 맞춰 camelCase 사용하고, 줄임말 피하기

6. null과 undefined는 둘 다 없음이지만 의미가 다름. null은 의도적으로 값이 없다는 것이고 undefined는 아직 값이 할당 안된 것.

---

##2주차 2 스터디로 알게 된 점
과거 문법과 현재 문법의 차이를 조금 더 이해하게 되었고,
지금은 더 간결하고 표준화된 방식으로 코드를 작성하는 것이 중요하다는 것을 배웠습니다.
또한, 엄격 모드를 통해 보다 안전하게 코딩하는 습관의 필요성도 느꼈습니다.
자바스크립트의 코드 구조와 변수의 특징, 자료형의 구성에 대해 완벽하진 않지만 점점 이해해가는 유익한 공부 시간이었습니다.

